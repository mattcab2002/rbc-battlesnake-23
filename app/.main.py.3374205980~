import random
import typing
import board
import logic


# info is called when you create your Battlesnake on play.battlesnake.com
# and controls your Battlesnake's appearance
# TIP: If you open your Battlesnake URL in a browser you should see this data
def info() -> typing.Dict:
  print("INFO")

  return {
    "apiversion": "1",
    "author": "Quebek Snek",  # TODO: Your Battlesnake Username
    "color": "#003399",  # Quebec Flag Color
    "head": "earmuffs",
    "tail": "flake",
  }


# start is called when your Battlesnake begins a game
def start(game_state: typing.Dict):
  print("GAME START")


# end is called when your Battlesnake finishes a game
def end(game_state: typing.Dict):
  print("GAME OVER\n")


# move is called on every turn and returns your next move
# Valid moves are "up", "down", "left", or "right"
# See https://docs.battlesnake.com/api/example-move for available data
def move(game_state: typing.Dict) -> typing.Dict:

  #curBoard = board.Board(game_state["board"])
  #headPosition = game_state["you"]["body"][0]
  #health = game_state["you"]["health"][0]

  logic.getBestMove(curBoard, headPosition, health)

  is_move_safe = {"up": True, "down": True, "left": True, "right": True}

  # We've included code to prevent your Battlesnake from moving backwards
  my_head = game_state["you"]["body"][0]  # Coordinates of your head
  my_neck = game_state["you"]["body"][1]  # Coordinates of your "neck"

  if my_neck["x"] < my_head["x"]:  # Neck is left of head, don't move left
    is_move_safe["left"] = False

  elif my_neck["x"] > my_head["x"]:  # Neck is right of head, don't move right
    is_move_safe["right"] = False

  elif my_neck["y"] < my_head["y"]:  # Neck is below head, don't move down
    is_move_safe["down"] = False

  elif my_neck["y"] > my_head["y"]:  # Neck is above head, don't move up
    is_move_safe["up"] = False

  # TODO: Step 1 - Prevent your Battlesnake from moving out of bounds
  board_width = game_state['board']['width']
  board_height = game_state['board']['height']

  if my_head["y"] == board_height - 1:
    is_move_safe["up"] = False
  if my_head["y"] == 0:
    is_move_safe["down"] = False
  if my_head["x"] == 0:
    is_move_safe["left"] = False
  if my_head["x"] == board_width - 1:
    is_move_safe["right"] = False

  # TODO: Step 2 - Prevent your Battlesnake from colliding with itself
  my_body = game_state['you']['body']

  temp = my_head.copy()
  temp["x"] += 1
  if temp in my_body[1:] and my_body[1:].index(temp) != len(
      my_body) - 1:  # if body part not already there and is not tail
    is_move_safe["right"] = False

  temp = my_head.copy()
  temp["x"] -= 1
  if temp in my_body[1:] and my_body[1:].index(temp) != len(my_body) - 1:
    is_move_safe["left"] = False

  temp = my_head.copy()
  temp["y"] += 1
  if temp in my_body[1:] and my_body[1:].index(temp) != len(my_body) - 1:
    is_move_safe["up"] = False

  temp = my_head.copy()
  temp["y"] -= 1
  if temp in my_body[1:] and my_body[1:].index(temp) != len(my_body) - 1:
    is_move_safe["down"] = False

  # TODO: Step 3 - Prevent your Battlesnake from colliding with other Battlesnakes
  # opponents = game_state['board']['snakes']

  # Are there any safe moves left?
  safe_moves = []
  for move, isSafe in is_move_safe.items():
    if isSafe:
      safe_moves.append(move)

  if len(safe_moves) == 0:
    print(f"MOVE {game_state['turn']}: No safe moves detected! Moving down")
    return {"move": "down"}

  # Choose a random move from the safe ones
  next_move = random.choice(safe_moves)

  # TODO: Step 4 - Move towards food instead of random, to regain health and survive longer
  food = game_state['board']['food']
  foodDistance = []
  for item in food:
    foodDistance.append(
      abs(my_head["x"] + my_head["y"] - item["x"] - item["y"]))
  # find the nearest food location
  smallestDistance = foodDistance.index(min(foodDistance))
  # plan the route to food
  if (my_head["x"] - 1 + my_head["y"] == foodDistance[smallestDistance] - 1):
    next_move = 'left'
  if (my_head["x"] + 1 + my_head["y"] == foodDistance[smallestDistance] - 1):
    next_move = 'right'
  if (my_head["y"] + 1 + my_head["x"] == foodDistance[smallestDistance] - 1):
    next_move = 'up'
  if (my_head["y"] - 1 + my_head["x"] == foodDistance[smallestDistance] - 1):
    next_move = 'down'
  #check also if that move is hitting its own body or tail

  print(f"MOVE {game_state['turn']}: {next_move}")
  return {"move": next_move}


# Start server when `python main.py` is run
if __name__ == "__main__":
  from server import run_server

  run_server({"info": info, "start": start, "move": move, "end": end})
